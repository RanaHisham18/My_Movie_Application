Index: app/src/main/java/com/rana/mymovieapplication/presentation/homescreen/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.rana.mymovieapplication.presentation.homescreen\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore.Audio.Genres\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.NavHostFragment\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.LinearSnapHelper\r\nimport androidx.recyclerview.widget.SnapHelper\r\nimport com.google.gson.Gson\r\nimport com.google.gson.reflect.TypeToken\r\n\r\nimport com.rana.mymovieapplication.R\r\nimport com.rana.mymovieapplication.data.remote.entities.*\r\nimport com.rana.mymovieapplication.data.remote.entities.MovieCategoryModel.Genre\r\nimport kotlinx.android.synthetic.main.fragment_home.*\r\nimport org.koin.androidx.viewmodel.ext.android.viewModel\r\n\r\n\r\nclass HomeFragment : Fragment() {\r\n\r\n    //first Rv\r\n    private lateinit var playingNowAdapter: NowPlayingAdapter\r\n\r\n    //second Rv\r\n    private lateinit var popularFilmsAdapter: PopularFilmsAdapter\r\n\r\n    //third Rv\r\n    private lateinit var topRatedAdapter: TopRatedAdapter\r\n\r\n    private val viewModel: HomeViewModel by viewModel()\r\n\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    ): View? {\r\n        return inflater.inflate(\r\n            R.layout.fragment_home, container, false\r\n        )\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        //first Rv\r\n        playingNowAdapter = NowPlayingAdapter(movieItemCallBack = {\r\n            findNavController().navigate(\r\n                HomeFragmentDirections\r\n                    .actionHomeFragmentToMovieDetailFragment(it)\r\n            )\r\n\r\n        })\r\n        val snapHelperPlayingNow: SnapHelper = LinearSnapHelper()\r\n        snapHelperPlayingNow.attachToRecyclerView(nowplaying_recyclerview)\r\n\r\n        nowplaying_recyclerview.layoutManager = LinearLayoutManager(\r\n            activity, LinearLayoutManager.HORIZONTAL, false\r\n        )\r\n\r\n        //Second Rv\r\n        popularFilmsAdapter = PopularFilmsAdapter(movieItemCallBack = {\r\n            findNavController().navigate(\r\n                HomeFragmentDirections\r\n                    .actionHomeFragmentToMovieDetailFragment(it)\r\n            )\r\n\r\n        })\r\n\r\n        popular_recyclerview.layoutManager = LinearLayoutManager(\r\n            activity, LinearLayoutManager.HORIZONTAL, false\r\n        )\r\n\r\n        //third Rv\r\n        topRatedAdapter = TopRatedAdapter(movieItemCallBack = {\r\n            findNavController().navigate(HomeFragmentDirections\r\n                .actionHomeFragmentToMovieDetailFragment(it))\r\n\r\n        })\r\n        toprated_recyclerview.layoutManager = LinearLayoutManager(\r\n            activity, LinearLayoutManager.HORIZONTAL, false\r\n        )\r\n\r\n        viewModel.getNowPlaying()\r\n        viewModel.nowPlayingLiveData.observe(viewLifecycleOwner) {\r\n            when (it is NowPlayingModel) {\r\n                true -> {\r\n                    playingNowAdapter.setData(it.results)\r\n                    nowplaying_recyclerview.adapter = playingNowAdapter\r\n                }\r\n                else -> {\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        viewModel.getPopular()\r\n        viewModel.popularModelLiveData.observe(viewLifecycleOwner) {\r\n            when (it is PopularModel) {\r\n                true -> {\r\n                    popularFilmsAdapter.setData(it.results)\r\n                    popular_recyclerview.adapter = popularFilmsAdapter\r\n                }\r\n                else -> {\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        viewModel.getTopRated()\r\n        viewModel.topRatedLiveData.observe(viewLifecycleOwner) {\r\n            when (it is TopRatedModel) {\r\n                true -> {\r\n                    topRatedAdapter.setData(it.results)\r\n                    toprated_recyclerview.adapter = topRatedAdapter\r\n                }\r\n                else -> {\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n//        <List<Genre>>\r\n        viewModel.getCategory()\r\n        viewModel.MovieCategoryLiveData.observe(viewLifecycleOwner) {\r\n            when (it is MovieCategoryModel) {\r\n                true -> {\r\n//                    val sharedPreferences: SharedPreferences = requireActivity()\r\n//                        .getSharedPreferences(\"My Movie Application\", Context.MODE_PRIVATE)\r\n\r\n\r\n//                    val editor = sharedPreferences.edit()\r\n//                    editor.putString(\"My Movie Application\", serializedList)\r\n//                    editor.apply()\r\n//                     serializedList = sharedPreferences.getString(\"My Movie Application\", \"\")\r\n\r\n                    var gson = Gson()\r\n                    var movieCategoryList = listOf(MovieCategoryModel(genres = List<MovieCategoryModel.Genre(id, name = String())>))\r\n                    var movieCategoryListJson = gson.toJson(movieCategoryList)\r\n                    var sharedPrefs = context?.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE)\r\n                    val editor = sharedPrefs?.edit()\r\n                    editor?.putString(\"movie_categories\", movieCategoryListJson)\r\n                    editor?.apply()\r\n\r\n                    sharedPrefs = context?.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE)\r\n                     movieCategoryListJson = sharedPrefs?.getString(\"movie_categories\", null)\r\n                    val type = object : TypeToken<List<MovieCategoryModel>>() {}.type\r\n                     movieCategoryList = gson.fromJson<List<MovieCategoryModel>>(movieCategoryListJson, type)\r\n\r\n\r\n                }\r\n                else -> {\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        //to be checked\r\n        nowplay_seeAll_TextView.setOnClickListener(View.OnClickListener {\r\n            val navHostFragment =\r\n                activity?.supportFragmentManager?.findFragmentById(R.id.fragmentContainerView) as NavHostFragment\r\n            val navController = navHostFragment.navController\r\n            navController.navigate(R.id.nowPlayingSeeAllFragment)\r\n        })\r\n\r\n        popular_seeAll_TextView.setOnClickListener(View.OnClickListener {\r\n            val navHostFragment =\r\n                activity?.supportFragmentManager?.findFragmentById(R.id.fragmentContainerView) as NavHostFragment\r\n            val navController = navHostFragment.navController\r\n            navController.navigate(R.id.popularSeeAllFragment)\r\n        })\r\n\r\n        toprated_seeAll_TextView.setOnClickListener(View.OnClickListener {\r\n            val navHostFragment =\r\n                activity?.supportFragmentManager?.findFragmentById(R.id.fragmentContainerView) as NavHostFragment\r\n            val navController = navHostFragment.navController\r\n            navController.navigate(R.id.topRatedSeeAllFragment)\r\n        })\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/rana/mymovieapplication/presentation/homescreen/HomeFragment.kt b/app/src/main/java/com/rana/mymovieapplication/presentation/homescreen/HomeFragment.kt
--- a/app/src/main/java/com/rana/mymovieapplication/presentation/homescreen/HomeFragment.kt	(revision ce6f183c977cb55f260f7d660b509a115474cfa2)
+++ b/app/src/main/java/com/rana/mymovieapplication/presentation/homescreen/HomeFragment.kt	(date 1678477926940)
@@ -142,15 +142,15 @@
 //                    editor.putString("My Movie Application", serializedList)
 //                    editor.apply()
 //                     serializedList = sharedPreferences.getString("My Movie Application", "")
-
+                    //serialize
                     var gson = Gson()
-                    var movieCategoryList = listOf(MovieCategoryModel(genres = List<MovieCategoryModel.Genre(id, name = String())>))
+                    var movieCategoryList = listOf(MovieCategoryModel)
                     var movieCategoryListJson = gson.toJson(movieCategoryList)
                     var sharedPrefs = context?.getSharedPreferences("MyPrefs", Context.MODE_PRIVATE)
                     val editor = sharedPrefs?.edit()
                     editor?.putString("movie_categories", movieCategoryListJson)
                     editor?.apply()
-
+                     //deserilaize
                     sharedPrefs = context?.getSharedPreferences("MyPrefs", Context.MODE_PRIVATE)
                      movieCategoryListJson = sharedPrefs?.getString("movie_categories", null)
                     val type = object : TypeToken<List<MovieCategoryModel>>() {}.type
